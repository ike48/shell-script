#!/bin/bash
#//////////////////////////////////////////////////////////////////////
#/
#/ Script Name : common.env
#/ 
#/ Desctiption :
#/     1. Setting common environment valiables.
#/     2. Setting common functions.
#/ 
#/ Usage :
#/     . common.env
#/
#//////////////////////////////////////////////////////////////////////
# ------------------------------------------
# Environment Variables
# ------------------------------------------
# Execution
umask 0022
export MY_HOST=$(hostname -s)
export MY_NAME=$(whoami)
export MY_PID=$$
export LANG=C
export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Scripts
export SCRIPT_ARGS=$@
export SCRIPT_NAME=$(basename $0)               # hoge.sh
export SCRIPT_BASE_NAME=${SCRIPT_NAME%.*}       # hoge
export SCRIPT_BASE_DIR=$(cd $(dirname $0) && pwd)
export SCRIPT_CONF_DIR=${SCRIPT_BASE_DIR}/conf
export SCRIPT_CONF_FILE=${SCRIPT_CONF_DIR}/${SCRIPT_BASE_NAME}.conf
export SCRIPT_DAT_DIR=${SCRIPT_BASE_DIR}/dat
export SCRIPT_LOG_DIR=${SCRIPT_BASE_DIR}/log
export SCRIPT_TMP_DIR=${SCRIPT_BASE_DIR}/tmp

# Date and Time
export DATETIME=$(date +'%Y%m%d%H%M%S')
export TODAY=$(date +'%Y%m%d')
export YEAR=$(date +'%Y')
export MONTH=$(date +'%m')
export DAY=$(date +'%d')
export YESTERDAY=$(date +'%Y%m%d' --date '1 days ago')
export LAST_MONTH=$(date +'%Y%m' --date '1 months ago')
export LAST_YEAR=$(date +'%Y' --date '1 years ago')

# Return Codes
export RC_SUCCESS=0
export RC_FAILURE=1

# ------------------------------------------
# Functions
# ------------------------------------------
_Message(){
    local OPT OPTIND OPTARG
    while getopts ":i:w:e:l" OPT
    do
        case ${OPT} in
        i )
            echo $(date +'%F %T %Z') ${MY_HOST} ${SCRIPT_NAME}\(${MY_PID}\): "[INFO] " "${OPTARG}"
            ;;
        w )
            echo $(date +'%F %T %Z') ${MY_HOST} ${SCRIPT_NAME}\(${MY_PID}\): "[WARN] " "${OPTARG}"
            ;;
        e )
            echo $(date +'%F %T %Z') ${MY_HOST} ${SCRIPT_NAME}\(${MY_PID}\): "[ERROR]" "${OPTARG}"
            ;;
        l )
            echo "----------------------------------------------------------------------------------------"
            ;;
        * )
            ;;
        esac
    done
}

_Success(){
    _Message -i "===== [${SCRIPT_NAME} ${SCRIPT_ARGS}] succsessfully completed. (RC=${RC_SUCCESS}) ====="
    exit ${RC_SUCCESS}
}

_Warning(){
    if [ ! -z "$1" ];then
        RC_SUCCESS=$(echo "$1" | egrep "^[0-9]*$" | awk '{if($1 >= 0 && $1 <= 255) print $1}')
    fi
    
    if [ -z "${RC_SUCCESS}" ];then
        _Message -w "\"$1\" is invalid for return code."
        RC_SUCCESS=0
    fi
    
    _Message -w "===== [${SCRIPT_NAME} ${SCRIPT_ARGS}] ended with warnings. (RC=${RC_SUCCESS}) ====="
    exit ${RC_SUCCESS}
}

_Failure(){
    if [ ! -z "$1" ];then
        RC_FAILURE=$(echo "$1" | egrep "^[0-9]*$" | awk '{if($1 >= 0 && $1 <= 255) print $1}')
    fi
    
    if [ -z "${RC_FAILURE}" ];then
        _Message -w "\"$1\" is invalid for return code."
        RC_FAILURE=1
    fi
    
    _Message -e "===== [${SCRIPT_NAME} ${SCRIPT_ARGS}] failed with errors. (RC=${RC_FAILURE}) ====="
    exit ${RC_FAILURE}
}

_Usage(){
    grep "^#/" $0
    _Failure 2
}

_CheckUser(){
    AUTHZ_USER=$1
    if [ "${AUTHZ_USER}" != "${MY_NAME}" ];then
        _Message -e "You must be ${AUTHZ_USER}."
        _Failure 126
    fi
}
